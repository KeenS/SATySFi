@require: gr

module Proof : sig

  direct \derive : [math list; math] math-cmd
  direct \derive-multi : [length; math list; math] math-cmd

end = struct

  let-math \math-space len =
    text-in-math MathOrd (fun _ -> inline-skip len)


  let length-max len1 len2 =
    if len1 <' len2 then len2 else len1


  let derive widopt mlst1 m2 =
    let ib-space =
      match widopt with
      | None    -> inline-skip 30pt
      | Some(_) -> discretionary 100 (inline-skip 30pt) inline-fil inline-fil
    in
    text-in-math MathInner (fun ctx -> (
      let ibacc1 =
        (mlst1 |> List.fold-left-adjacent (fun ibacc1 m prevopt _ -> (
          let ibm = embed-math ctx m in
            match prevopt with
            | None    -> inline-fil ++ ibm
            | Some(_) -> ibacc1 ++ ib-space ++ ibm
        )) inline-nil) ++ inline-fil
      in
      let ib1 =
        match widopt with
        | None      -> ibacc1
        | Some(wid) -> embed-block-bottom ctx wid (fun ctx -> line-break true true ctx ibacc1)
      in
      let ib2 = inline-fil ++ (embed-math ctx m2) ++ inline-fil in
      let w =
        match widopt with
        | None      -> length-max (get-natural-width ib1) (get-natural-width ib2)
        | Some(wid) -> length-max wid (get-natural-width ib2)
      in
      let color = get-text-color ctx in
      let thickness = 0.5pt in
      let gap = 2pt in
      let bar =
        inline-graphics w (thickness +' gap) gap (fun (x, y) ->
          [ fill color (Gr.rectangle (x, y) (x +' w, y +' thickness)); ]
        )
      in
        line-stack-bottom [ib1; bar; ib2]
    ))


  let-math \derive = derive None

  let-math \derive-multi w = derive (Some(w))

end
