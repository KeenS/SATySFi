@require: list

module Gr : sig

  val rectangle : length * length -> length * length -> path
  val rectangle-round       : length -> length * length -> length * length -> path
  val rectangle-round-left  : length -> length * length -> length * length -> path
  val rectangle-round-right : length -> length * length -> length * length -> path
  val poly-line : length * length -> (length * length) list -> path
  val line : length * length -> length * length -> path
  val circle : length * length -> length -> path
  val text-centering : length * length -> inline-boxes -> graphics

end = struct

  let rectangle (x1, y1) (x2, y2) =
    start-path (x1, y1)
      |> line-to (x1, y2)
      |> line-to (x2, y2)
      |> line-to (x2, y1)
      |> close-with-line


  let rectangle-round r (xA, yA) (xB, yB) =
    let t = r *' 0.4 in
    let x1 = length-min xA xB in
    let x2 = length-max xA xB in
    let y1 = length-min yA yB in
    let y2 = length-max yA yB in
      start-path                                 (x1, y1 +' r)
        |> bezier-to (x1, y1 +' t) (x1 +' t, y1) (x1 +' r, y1)
        |> line-to                               (x2 -' r, y1)
        |> bezier-to (x2 -' t, y1) (x2, y1 +' t) (x2, y1 +' r)
        |> line-to                               (x2, y2 -' r)
        |> bezier-to (x2, y2 -' t) (x2 -' t, y2) (x2 -' r, y2)
        |> line-to                               (x1 +' r, y2)
        |> bezier-to (x1 +' t, y2) (x1, y2 -' t) (x1, y2 -' r)
        |> close-with-line


  let rectangle-round-left r (xA, yA) (xB, yB) =
    let t = r *' 0.4 in
    let x1 = length-min xA xB in
    let x2 = length-max xA xB in
    let y1 = length-min yA yB in
    let y2 = length-max yA yB in
      start-path                                 (x1, y1 +' r)
        |> bezier-to (x1, y1 +' t) (x1 +' t, y1) (x1 +' r, y1)
        |> line-to                               (x2, y1)
        |> line-to                               (x2, y2)
        |> line-to                               (x1 +' r, y2)
        |> bezier-to (x1 +' t, y2) (x1, y2 -' t) (x1, y2 -' r)
        |> close-with-line


  let rectangle-round-right r (xA, yA) (xB, yB) =
    let t = r *' 0.4 in
    let x1 = length-min xA xB in
    let x2 = length-max xA xB in
    let y1 = length-min yA yB in
    let y2 = length-max yA yB in
      start-path                                 (x1, y1)
        |> line-to                               (x2 -' r, y1)
        |> bezier-to (x2 -' t, y1) (x2, y1 +' t) (x2, y1 +' r)
        |> line-to                               (x2, y2 -' r)
        |> bezier-to (x2, y2 -' t) (x2 -' t, y2) (x2 -' r, y2)
        |> line-to                               (x1, y2)
        |> close-with-line


  let poly-line ptinit ptlst =
    ptlst |> List.fold-left (fun acc pt -> (
      acc |> line-to pt
    )) (start-path ptinit) |> terminate-path


  let line pt1 pt2 =
    start-path pt1 |> line-to pt2 |> terminate-path


  let circle (cx, cy) r =
    let t = r *' 0.55228 in
      start-path (cx -' r, cy)
        |> bezier-to (cx -' r, cy +' t) (cx -' t, cy +' r) (cx, cy +' r)
        |> bezier-to (cx +' t, cy +' r) (cx +' r, cy +' t) (cx +' r, cy)
        |> bezier-to (cx +' r, cy -' t) (cx +' t, cy -' r) (cx, cy -' r)
        |> close-with-bezier (cx -' t, cy -' r) (cx -' r, cy -' t)


  let text-centering pt ib =
    let gr = draw-text pt ib in
    let ((xmin, _), (xmax, _)) = get-graphics-bbox gr in
    let wid = xmax -' xmin in
      shift-graphics (0pt -' wid *' 0.5, 0pt) gr

end
