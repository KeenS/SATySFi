@require: pervasives
@require: color
@require: gr
@require: option

module Annot : sig

  direct \href : [length?; color?; string; inline-text] inline-cmd
  val link-to-uri-frame : string -> length option -> color option -> deco-set
  val link-to-location-frame : string -> length option -> color option -> deco-set
  val register-location-frame : string -> deco-set

end = struct

  let link-to-uri-frame uri borderopt coloropt =
    let border = Option.from 0.0pt borderopt in
    let deco (x, y) w h d =
      let () = register-link-to-uri uri (x, y) w h d border coloropt in []
    in
      (deco, deco, deco, deco)


  let link-to-location-frame name borderopt coloropt =
    let border = Option.from 0.0pt borderopt in
    let deco (x, y) w h d =
      let () = register-link-to-location name (x, y) w h d border coloropt in []
    in
      (deco, deco, deco, deco)


  let-inline ctx \href ?:borderopt ?:coloropt uri inner =
    inline-frame-breakable (0pt, 0pt, 0pt, 0pt) (link-to-uri-frame uri borderopt coloropt) (read-inline ctx inner)


  let register-location-frame key =
    let decoR (x, y) w h d =
      let () = register-destination key (x, y +' h) in []
    in
    let decoI _ _ _ _ = [] in
      (decoR, decoR, decoI, decoI)

end
