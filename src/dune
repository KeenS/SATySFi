(executable
 (name main)
 (public_name satysfi)
 (flags (-w -3 -bin-annot -thread -unsafe-string))
 (libraries str
            batteries
            camlimages
            camlimages.jpeg
            camlpdf
            core_kernel
            menhirLib
            otfm
            uutf
            yojson
            omd
            )
 (preprocess (pps
              ppx_deriving.show
              ))
 )

;; dune requires all the .ml/.mli files to be in the same directory as the jbuild.
;; https://github.com/ocaml/dune/issues/109
(copy_files# backend/*.{ml,mli})
(copy_files# text-mode/*.{ml,mli})
(copy_files# chardecoder/*.{ml,mli})
(copy_files  chardecoder/*.{mll,mly})
(copy_files# frontend/*.{ml,mli})
(copy_files  frontend/*.{mll,mly})
(copy_files# frontend/bytecomp/*.{ml,mli})

(ocamllex
 (modules lexer dataLexer))

(menhir
 (modules parser dataParser)
 (flags (--table --explain)))

(rule
 (targets types_.ml)
 (deps    (:src types_.cppo.ml) __insttype.gen.ml __attype.gen.ml)
 (action  (run %{bin:cppo} %{src} -o %{targets})))

(rule
 (targets vm_.ml)
 (deps    (:src vm_.cppo.ml) __vm.gen.ml)
 (action  (run %{bin:cppo} %{src} -o %{targets})))

(rule
 (targets ir_.ml)
 (deps    (:src ir_.cppo.ml) __ir.gen.ml)
 (action  (run %{bin:cppo} %{src} -o %{targets})))

(rule
 (targets evaluator_.ml)
 (deps    (:src evaluator_.cppo.ml) __evaluator.gen.ml)
 (action  (run %{bin:cppo} %{src} -o %{targets})))

(rule
 (targets primitives_.ml)
 (deps    (:src primitives_.cppo.ml) __primitives_pdf_mode.gen.ml __primitives_text_mode.gen.ml)
 (action  (run %{bin:cppo} %{src} -o %{targets})))
